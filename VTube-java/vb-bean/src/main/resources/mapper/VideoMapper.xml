<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vtube.mapper.VideoMapper">

    <resultMap id="BaseResultMap" type="com.vtube.domain.Video">
            <id property="videoId" column="video_id" jdbcType="INTEGER"/>
            <result property="title" column="title" jdbcType="VARCHAR"/>
            <result property="description" column="description" jdbcType="VARCHAR"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="imagePath" column="image_path" jdbcType="VARCHAR"/>
            <result property="tags" column="tags" jdbcType="VARCHAR"/>
            <result property="type" column="type" jdbcType="OTHER"/>
            <result property="uploader" column="uploader" jdbcType="OTHER"/>
    </resultMap>

    <sql id="Base_Column_List">
        video_id,title,description,
        create_time,image_path,tags,
        type,uploader
    </sql>
    <select id="VideoList" resultType="com.vtube.vo.VideoVO">
        SELECT
        v.video_id,
        v.title,
        v.description,
        v.create_time,
        v.image_path,
        vd.views,
        vd.likes,
        v.tags,
        v.type,
        u.nick_name as nickName,
        u.user_id as userId,
        c.category_id,
        c.name as categoryName
        FROM vt_video v
        LEFT JOIN vt_video_data vd ON v.video_id = vd.video_id
        LEFT JOIN vt_user u ON vd.user_id = u.user_id
        LEFT JOIN vt_video_category vc ON v.video_id = vc.video_id
        LEFT JOIN vt_category c ON vc.category_id = c.category_id
        WHERE 1=1
        <if test="video.tags != null and video.tags.size() > 0">
            AND (
            <foreach collection="video.tags" item="tag" separator=" OR " open="(" close=")">
                FIND_IN_SET(#{tag}, tags) > 0
            </foreach>
            )
        </if>
        <if test="video.title != null and video.title != ''">
            AND v.title LIKE concat('%', #{video.title}, '%')
        </if>
        <if test="video.userId != null and video.userId != ''">
            AND u.user_id = #{video.userId}
        </if>
        <if test="video.type != null and video.type != ''">
            AND v.type = #{video.type}
        </if>
        <if test="video.categoryId != null and video.categoryId != ''">
            AND c.category_id = #{video.categoryId}
        </if>
        <if test="video.createTime != null">
            AND DATE(v.create_time) = #{video.createTime}
        </if>
        ORDER BY v.create_time DESC
    </select>
    <select id="getVideoDetails" resultType="com.vtube.vo.PlayDetailsVO">
        SELECT vt.video_id,
               vt.title,
               vt.description,
               vt.create_time,
               vt.tags,
               vt.image_path,
               vtd.views,
               (vtd.likes / 100.0) * 5 AS likes
        FROM vt_video AS vt
                 JOIN
             vt_video_data AS vtd
             ON
                 vt.video_id = vtd.video_id
        where vt.video_id = #{videoId};
    </select>
    <select id="weekList" resultType="com.vtube.vo.WeeklyAnimeUpdateVO">
        SELECT v.video_id,
               v.title,
               v.image_path,
               vu.week_day,
               vu.update_id
        FROM vt_video AS v
                 LEFT JOIN vt_video_update AS vu ON v.video_id = vu.video_id
    </select>


    <!-- 添加视频及相关信息数据 -->
    <insert id="addVideoData" parameterType="com.vtube.vo.VideoVO">
        <!-- 插入视频数据 -->
        INSERT INTO vt_video_data (video_id, user_id, views, likes)
        VALUES (#{videoId}, #{userId}, #{views}, #{likes});
    </insert>

    <insert id="addVideoCategory" parameterType="com.vtube.vo.VideoVO">
        <!-- 插入视频分类关联数据-->
        INSERT INTO vt_video_category (video_id, category_id)
        VALUES (#{videoId}, #{categoryId})
    </insert>

    <!-- 更新视频及相关信息数据 -->
    <update id="updateVideoData" parameterType="com.vtube.vo.VideoVO">
        <!-- 更新视频数据 -->
        UPDATE vt_video_data
        SET user_id = #{userId},
        views = #{views},
        likes = #{likes}
        WHERE video_id = #{videoId};
    </update>

    <update id="updateVideoCategory" parameterType="com.vtube.vo.VideoVO">
        <!-- 更新视频分类关联数据-->
        UPDATE vt_video_category
        SET category_id = #{categoryId}
        WHERE video_id = #{videoId};
    </update>
</mapper>
